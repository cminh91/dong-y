// Prisma schema unified for Dong Y Pharmacy

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm, uuid_ossp]
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  COD
  BANK_TRANSFER
  CREDIT_CARD
  EWALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  fullName    String
  phone       String?
  avatar      String?
  isVerified  Boolean   @default(false)
  role        UserRole  @default(CUSTOMER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orders      Order[]
  posts       Post[]
  reviews     ProductReview[]
  cart        Cart?
  wishlists   Wishlist[]
  addresses   Address[]
  socialAccounts SocialAccount[]
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  receiverName String
  phone        String
  addressLine  String
  city         String
  district     String
  ward         String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model SocialAccount {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  provider    String
  providerId  String
  createdAt   DateTime @default(now())

  @@unique([provider, providerId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  salePrice   Float?
  unit        String    @default("g√≥i")
  dosage      String?
  ingredients String?
  origin      String?
  imageUrls   String[]
  stock       Int       @default(0)
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  reviews     ProductReview[]
  wishlists   Wishlist[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}

model Order {
  id           Int          @id @default(autoincrement())
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  orderNumber  String       @unique
  totalAmount  Float
  status       OrderStatus  @default(PENDING)
  shippingId   Int?
  shipping     Shipping?    @relation(fields: [shippingId], references: [id])
  paymentId    Int?
  payment      Payment?     @relation(fields: [paymentId], references: [id])
  note         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  items        OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id            Int            @id @default(autoincrement())
  method        PaymentMethod
  amount        Float
  status        PaymentStatus  @default(PENDING)
  transactionId String?
  orderId       Int
  order         Order          @relation(fields: [orderId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Shipping {
  id                Int       @id @default(autoincrement())
  address           String
  city              String
  district          String
  ward              String
  phone             String
  receiverName      String
  fee               Float
  estimatedDelivery String?
  trackingNumber    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Promotion {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  content     String
  imageUrl    String?
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}