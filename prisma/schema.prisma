// Prisma schema unified for Dong Y Pharmacy

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  COD
  BANK_TRANSFER
  CREDIT_CARD
  EWALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Role {
  ADMIN
  USER
  AFFILIATE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  fullName      String
  phone         String?
  avatar        String?
  isVerified    Boolean   @default(false)
  role          UserRole  @default(CUSTOMER)
  status        Status    @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  posts         Post[]
  reviews       ProductReview[]
  cart          Cart?
  wishlists     Wishlist[]
  addresses     Address[]
  socialAccounts SocialAccount[]
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  receiverName String
  phone        String
  addressLine  String
  city         String
  district     String
  ward         String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Subscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model SocialAccount {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  provider    String
  providerId  String
  createdAt   DateTime @default(now())

  @@unique([provider, providerId])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  status      Status    @default(ACTIVE)
  type        CategoryType @default(SAN_PHAM)
  icon        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
   posts     Post[]
}

enum CategoryType {
  SAN_PHAM
  TIN_TUC
  GIOI_THIEU
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  salePrice   Float?
  unit        String    @default("g√≥i")
  dosage      String?
  ingredients String?
  origin      String?
  imageUrls   String[]
  stock       Int       @default(0)
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  reviews     ProductReview[]
  wishlists   Wishlist[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductReview {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
}

model Order {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  orderNumber  String       @unique
  totalAmount  Float
  status       OrderStatus  @default(PENDING)
  shippingId   String?
  shipping     Shipping?    @relation(fields: [shippingId], references: [id])
  paymentId    String?
  payment      Payment?
  note         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  items        OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id            String        @id @default(cuid())
  method        PaymentMethod
  amount        Float
  status        PaymentStatus @default(PENDING)
  transactionId String?
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Shipping {
  id                String   @id @default(cuid())
  address           String
  city              String
  district          String
  ward              String
  phone             String
  receiverName      String
  fee               Float
  estimatedDelivery String?
  trackingNumber    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orders            Order[]
}

model Promotion {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  thumbnail   String?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  tags        String[]
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}