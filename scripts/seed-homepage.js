const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanupHomepageData() {
  console.log('üßπ D·ªçn d·∫πp d·ªØ li·ªáu c≈©...');
  
  try {
    // X√≥a FAQs c√≥ category homepage
    const deletedFaqs = await prisma.fAQ.deleteMany({
      where: { category: 'homepage' }
    });

    // X√≥a SystemSettings c√≥ category homepage
    const deletedSettings = await prisma.systemSetting.deleteMany({
      where: { category: 'homepage' }
    });

    console.log(`‚úÖ ƒê√£ d·ªçn d·∫πp: ${deletedFaqs.count} FAQs, ${deletedSettings.count} Settings`);
  } catch (error) {
    console.warn('‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp:', error.message);
  }
}

async function seedHomepageData(cleanup = false) {
  console.log('üå± B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu trang ch·ªß...');

  try {
    // Cleanup n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (cleanup) {
      await cleanupHomepageData();
    }    // 1. Hero Section Data (Array format like JSON file)
    console.log('üìù Seeding Hero Section...');
    const heroSectionData = {
      key: 'hero_main',
      value: JSON.stringify([
        {
          id: "1",
          name: "HepaSaky",
          image: "/images/hepasaky.png",
          description: "H·ªñ TR·ª¢ GI·∫¢I ƒê·ªòC GAN"
        },
        {
          id: "2", 
          name: "LipaSaky",
          image: "/images/lypasaky.png",
          description: "H·ªñ TR·ª¢ GI·∫¢M M·ª† M√ÅU V√Ä TƒÇNG S·ª®C B·ªÄN TH√ÄNH M·∫†CH"
        }
      ]),
      category: 'homepage',
      description: 'Hero section carousel data for homepage'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'hero_main' },
      update: heroSectionData,
      create: heroSectionData
    });// 2. About Section Data
    console.log('üìù Seeding About Section...');
    const aboutSectionData = {
      key: 'about_main',
      value: JSON.stringify({
        title: 'V·ªÅ Ch√∫ng T√¥i',
        subtitle: 'H∆°n 20 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c ƒê√¥ng Y',
        description: 'Ch√∫ng t√¥i t·ª± h√†o l√† m·ªôt trong nh·ªØng ƒë∆°n v·ªã h√†ng ƒë·∫ßu trong lƒ©nh v·ª±c cung c·∫•p thu·ªëc ƒê√¥ng Y v√† th·∫£o d∆∞·ª£c t·ª± nhi√™n. V·ªõi ƒë·ªôi ng≈© chuy√™n gia gi√†u kinh nghi·ªám v√† quy tr√¨nh s·∫£n xu·∫•t nghi√™m ng·∫∑t, ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao nh·∫•t cho kh√°ch h√†ng.',
        image: '/images/trongdong.png',
        stats: [
          { number: '20+', label: 'NƒÉm kinh nghi·ªám' },
          { number: '10,000+', label: 'Kh√°ch h√†ng tin t∆∞·ªüng' },
          { number: '500+', label: 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng' },
          { number: '50+', label: 'Chuy√™n gia t∆∞ v·∫•n' }
        ],        features: [
          {
            title: 'Th·∫£o d∆∞·ª£c t·ª± nhi√™n',
            description: 'T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë∆∞·ª£c l√†m t·ª´ th·∫£o d∆∞·ª£c t·ª± nhi√™n 100%'
          },
          {
            title: 'Ch·ª©ng nh·∫≠n ch·∫•t l∆∞·ª£ng',
            description: 'ƒê∆∞·ª£c ki·ªÉm ƒë·ªãnh b·ªüi c√°c t·ªï ch·ª©c uy t√≠n trong v√† ngo√†i n∆∞·ªõc'
          },
          {
            title: 'ƒê·ªôi ng≈© chuy√™n gia',
            description: 'Chuy√™n gia ƒê√¥ng Y v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám t∆∞ v·∫•n'
          },
          {
            title: 'Giao h√†ng nhanh ch√≥ng',
            description: 'Giao h√†ng to√†n qu·ªëc trong 24-48h'
          }
        ]
      }),
      category: 'homepage',
      description: 'About section configuration for homepage'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'about_main' },
      update: aboutSectionData,
      create: aboutSectionData
    });    // 3. Benefits Section Data
    console.log('üìù Seeding Benefits Section...');
    const benefitsSectionData = {
      key: 'benefits_main',
      value: JSON.stringify({
        title: 'L·ª£i √çch Khi Ch·ªçn Ch√∫ng T√¥i',
        subtitle: 'Cam k·∫øt mang ƒë·∫øn s·∫£n ph·∫©m v√† d·ªãch v·ª• t·ªët nh·∫•t',        benefits: [
          {
            title: 'An to√†n tuy·ªát ƒë·ªëi',
            description: 'T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë∆∞·ª£c ki·ªÉm tra nghi√™m ng·∫∑t v·ªÅ ch·∫•t l∆∞·ª£ng v√† an to√†n tr∆∞·ªõc khi ƒë·∫øn tay kh√°ch h√†ng.'
          },
          {
            title: 'Ch·∫•t l∆∞·ª£ng cao',
            description: 'S·∫£n ph·∫©m ƒë∆∞·ª£c s·∫£n xu·∫•t theo ti√™u chu·∫©n GMP v·ªõi nguy√™n li·ªáu th·∫£o d∆∞·ª£c cao c·∫•p.'
          },
          {
            title: 'T∆∞ v·∫•n chuy√™n nghi·ªáp',
            description: 'ƒê·ªôi ng≈© d∆∞·ª£c sƒ© v√† b√°c sƒ© ƒê√¥ng Y gi√†u kinh nghi·ªám lu√¥n s·∫µn s√†ng t∆∞ v·∫•n.'
          },
          {
            title: 'Giao h√†ng to√†n qu·ªëc',
            description: 'D·ªãch v·ª• giao h√†ng nhanh ch√≥ng, ƒë·∫£m b·∫£o s·∫£n ph·∫©m ƒë·∫øn tay kh√°ch h√†ng an to√†n.'
          },
          {
            title: 'Gi√° c·∫£ h·ª£p l√Ω',
            description: 'Cam k·∫øt gi√° t·ªët nh·∫•t th·ªã tr∆∞·ªùng v·ªõi nhi·ªÅu ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n.'
          },
          {
            title: 'H·ªó tr·ª£ 24/7',
            description: 'ƒê·ªôi ng≈© chƒÉm s√≥c kh√°ch h√†ng lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n m·ªçi l√∫c, m·ªçi n∆°i.'
          }
        ]
      }),
      category: 'homepage',
      description: 'Benefits section configuration for homepage'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'benefits_main' },
      update: benefitsSectionData,
      create: benefitsSectionData
    });    // 4. Testimonials Section Data
    console.log('üìù Seeding Testimonials Section...');
    const testimonialsData = {
      key: 'testimonials_main',
      value: JSON.stringify({
        title: 'Kh√°ch H√†ng N√≥i V·ªÅ Ch√∫ng T√¥i',
        subtitle: 'H√†ng ngh√¨n kh√°ch h√†ng ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i',
        testimonials: [
          {
            id: '1',
            name: 'B√† Nguy·ªÖn Th·ªã Lan',
            location: 'TP. H·ªì Ch√≠ Minh',
            avatar: '/images/placeholder.png',
            rating: 5,
            content: 'T√¥i ƒë√£ s·ª≠ d·ª•ng s·∫£n ph·∫©m HEPASAKY c·ªßa c·ª≠a h√†ng ƒë∆∞·ª£c 3 th√°ng. K·∫øt qu·∫£ th·∫≠t s·ª± tuy·ªát v·ªùi, gan t√¥i ƒë√£ kh·ªèe h∆°n r·∫•t nhi·ªÅu. C·∫£m ∆°n ƒë·ªôi ng≈© t∆∞ v·∫•n nhi·ªát t√¨nh!',
            product: 'HEPASAKY GOLD'
          },
          {
            id: '2',
            name: '√îng Tr·∫ßn VƒÉn Minh',
            location: 'H√† N·ªôi',
            avatar: '/images/placeholder.png',
            rating: 5,
            content: 'L·∫ßn ƒë·∫ßu mua thu·ªëc ƒê√¥ng y online nh∆∞ng r·∫•t h√†i l√≤ng. S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng, giao h√†ng nhanh, nh√¢n vi√™n t∆∞ v·∫•n r·∫•t chuy√™n nghi·ªáp. T√¥i s·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô!',
            product: 'LYPASAKY'
          },
          {
            id: '3',
            name: 'Ch·ªã Ph·∫°m Thu H∆∞∆°ng',
            location: 'ƒê√† N·∫µng',
            avatar: '/images/placeholder.png',
            rating: 5,
            content: 'Sau khi sinh con, c∆° th·ªÉ t√¥i r·∫•t y·∫øu. Nh·ªù s·ª≠ d·ª•ng c√°c s·∫£n ph·∫©m b·ªï d∆∞·ª°ng ·ªü ƒë√¢y m√† t√¥i ƒë√£ ph·ª•c h·ªìi s·ª©c kh·ªèe nhanh ch√≥ng. R·∫•t c·∫£m ∆°n!',
            product: 'Combo b·ªï d∆∞·ª°ng'
          },
          {
            id: '4',
            name: 'Anh L√™ Ho√†ng Nam',
            location: 'C·∫ßn Th∆°',
            avatar: '/images/placeholder.png',
            rating: 4,
            content: 'T√¥i b·ªã ƒëau d·∫° d√†y m√£n t√≠nh nhi·ªÅu nƒÉm. Sau khi d√πng thu·ªëc ƒê√¥ng y t·∫°i ƒë√¢y ƒë∆∞·ª£c 2 th√°ng, t√¨nh tr·∫°ng ƒë√£ c·∫£i thi·ªán ƒë√°ng k·ªÉ. R·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.',
            product: 'Thu·ªëc d·∫° d√†y'
          }
        ]
      }),
      category: 'homepage',
      description: 'Testimonials section configuration for homepage'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'testimonials_main' },
      update: testimonialsData,
      create: testimonialsData
    });

    // 5. Contact Section Data
    console.log('üìù Seeding Contact Section...');
    const contactSectionData = {
      key: 'contact_main',
      value: JSON.stringify({
        title: 'Li√™n H·ªá V·ªõi Ch√∫ng T√¥i',
        subtitle: 'H√£y ƒë·ªÉ l·∫°i th√¥ng tin, ch√∫ng t√¥i s·∫Ω li√™n h·ªá t∆∞ v·∫•n mi·ªÖn ph√≠ cho b·∫°n.',        contactInfo: {
          address: {
            title: 'ƒê·ªãa ch·ªâ',
            value: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP. H·ªì Ch√≠ Minh'
          },
          phone: {
            title: 'ƒêi·ªán tho·∫°i',
            value: '1900 1234'
          },
          email: {
            title: 'Email',
            value: 'info@dongypharmacy.com'
          },
          workingHours: {
            title: 'Gi·ªù l√†m vi·ªác',
            value: 'Th·ª© 2 - Ch·ªß nh·∫≠t: 8:00 - 20:00'
          }
        },
        socialLinks: [
          { platform: 'Facebook', url: '#' },
          { platform: 'Twitter', url: '#' },
          { platform: 'Instagram', url: '#' },
          { platform: 'YouTube', url: '#' }
        ]}),      category: 'homepage',
      description: 'Contact section configuration for homepage'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'contact_main' },
      update: contactSectionData,
      create: contactSectionData
    });

    // 6. Website Configuration
    console.log('üìù Seeding Website Configuration...');
    const websiteConfigData = {
      key: 'website_config',
      value: JSON.stringify({
        siteName: 'DONGYHUYNH',
        siteTagline: 'Th∆∞∆°ng hi·ªáu thu·ªëc ƒê√¥ng Y uy t√≠n',
        siteDescription: 'Chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m thu·ªëc ƒê√¥ng Y ch·∫•t l∆∞·ª£ng cao, ƒë∆∞·ª£c b√†o ch·∫ø t·ª´ nh·ªØng th·∫£o d∆∞·ª£c qu√Ω hi·∫øm theo ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng.',
        logo: '/images/logo.jpg',
        favicon: '/favicon.ico',
        contactEmail: 'info@dongypharmacy.com',
        supportPhone: '1900 1234',
        businessHours: 'Th·ª© 2 - Ch·ªß nh·∫≠t: 8:00 - 20:00',
        address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP. H·ªì Ch√≠ Minh',
        socialMedia: {
          facebook: 'https://facebook.com/dongyhuynh',
          youtube: 'https://youtube.com/dongyhuynh',
          zalo: 'https://zalo.me/dongyhuynh'
        },
        seo: {
          metaTitle: 'DONGYHUYNH - Th∆∞∆°ng hi·ªáu thu·ªëc ƒê√¥ng Y uy t√≠n',
          metaDescription: 'Chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m thu·ªëc ƒê√¥ng Y ch·∫•t l∆∞·ª£ng cao, th·∫£o d∆∞·ª£c t·ª± nhi√™n 100%. T∆∞ v·∫•n mi·ªÖn ph√≠ t·ª´ chuy√™n gia.',
          metaKeywords: 'thu·ªëc ƒë√¥ng y, th·∫£o d∆∞·ª£c, ƒë√¥ng y huynh, hepasaky, lypasaky'
        }
      }),
      category: 'homepage',
      description: 'General website configuration'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'website_config' },
      update: websiteConfigData,
      create: websiteConfigData
    });

    // 7. Homepage Layout Settings
    console.log('üìù Seeding Homepage Layout...');
    const homepageLayoutData = {
      key: 'homepage_layout',
      value: JSON.stringify({
        sections: [
          { id: 'hero', name: 'Hero Section', enabled: true, order: 1 },
          { id: 'featured-products', name: 'S·∫£n ph·∫©m n·ªïi b·∫≠t', enabled: true, order: 2 },
          { id: 'about', name: 'V·ªÅ ch√∫ng t√¥i', enabled: true, order: 3 },
          { id: 'benefits', name: 'L·ª£i √≠ch', enabled: true, order: 4 },
          { id: 'testimonials', name: 'Nh·∫≠n x√©t kh√°ch h√†ng', enabled: true, order: 5 },
          { id: 'recent-posts', name: 'B√†i vi·∫øt m·ªõi', enabled: true, order: 6 },
          { id: 'faqs', name: 'C√¢u h·ªèi th∆∞·ªùng g·∫∑p', enabled: true, order: 7 },
          { id: 'contact', name: 'Li√™n h·ªá', enabled: true, order: 8 }
        ],
        featuredProductsSettings: {
          title: 'S·∫£n Ph·∫©m N·ªïi B·∫≠t',
          subtitle: 'Nh·ªØng s·∫£n ph·∫©m ƒë∆∞·ª£c kh√°ch h√†ng tin t√πng v√† l·ª±a ch·ªçn nhi·ªÅu nh·∫•t',
          limit: 8,
          showPrice: true,
          showRating: true,
          layout: 'grid'
        },
        recentPostsSettings: {
          title: 'Tin T·ª©c & B√†i Vi·∫øt',
          subtitle: 'C·∫≠p nh·∫≠t nh·ªØng ki·∫øn th·ª©c m·ªõi nh·∫•t v·ªÅ ƒê√¥ng Y v√† s·ª©c kh·ªèe',
          limit: 6,
          showExcerpt: true,
          showAuthor: true,
          showDate: true
        }
      }),
      category: 'homepage',
      description: 'Homepage sections layout and configuration'
    };

    await prisma.systemSetting.upsert({
      where: { key: 'homepage_layout' },
      update: homepageLayoutData,
      create: homepageLayoutData
    });

    // 8. T·∫°o sample FAQs
    console.log('üìù Seeding FAQs...');
      const faqs = [
      {
        question: 'S·∫£n ph·∫©m c√≥ ƒë∆∞·ª£c ki·ªÉm ƒë·ªãnh ch·∫•t l∆∞·ª£ng kh√¥ng?',
        answer: 'T·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i ƒë·ªÅu ƒë∆∞·ª£c ki·ªÉm ƒë·ªãnh nghi√™m ng·∫∑t theo ti√™u chu·∫©n GMP v√† c√≥ gi·∫•y ch·ª©ng nh·∫≠n t·ª´ B·ªô Y t·∫ø.',
        category: 'homepage',
        isActive: true,
        sortOrder: 1
      },
      {
        question: 'Th·ªùi gian giao h√†ng l√† bao l√¢u?',
        answer: 'Ch√∫ng t√¥i cam k·∫øt giao h√†ng trong v√≤ng 24-48h t·∫°i TP.HCM v√† H√† N·ªôi, 2-3 ng√†y cho c√°c t·ªânh th√†nh kh√°c.',
        category: 'homepage',
        isActive: true,
        sortOrder: 2
      },
      {
        question: 'C√≥ t∆∞ v·∫•n mi·ªÖn ph√≠ kh√¥ng?',
        answer: 'C√≥, ƒë·ªôi ng≈© d∆∞·ª£c sƒ© v√† b√°c sƒ© ƒê√¥ng Y c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng t∆∞ v·∫•n mi·ªÖn ph√≠ 24/7.',
        category: 'homepage',
        isActive: true,
        sortOrder: 3
      },
      {
        question: 'Ch√≠nh s√°ch ƒë·ªïi tr·∫£ nh∆∞ th·∫ø n√†o?',
        answer: 'Ch√∫ng t√¥i h·ªó tr·ª£ ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m c√≥ l·ªói t·ª´ nh√† s·∫£n xu·∫•t ho·∫∑c kh√¥ng ƒë√∫ng nh∆∞ m√¥ t·∫£.',
        category: 'homepage',
        isActive: true,
        sortOrder: 4
      },
      {
        question: 'C√≥ h·ªó tr·ª£ thanh to√°n COD kh√¥ng?',
        answer: 'C√≥, ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n COD (thanh to√°n khi nh·∫≠n h√†ng) tr√™n to√†n qu·ªëc.',
        category: 'homepage',
        isActive: true,
        sortOrder: 5
      }
    ];    for (const faq of faqs) {
      // Ki·ªÉm tra xem FAQ c√≥ t·ªìn t·∫°i ch∆∞a d·ª±a tr√™n question
      const existingFaq = await prisma.fAQ.findFirst({
        where: { 
          question: faq.question,
          category: 'homepage'
        }
      });

      if (existingFaq) {
        // C·∫≠p nh·∫≠t FAQ hi·ªán c√≥
        await prisma.fAQ.update({
          where: { id: existingFaq.id },
          data: faq
        });
      } else {
        // T·∫°o FAQ m·ªõi
        await prisma.fAQ.create({
          data: faq
        });
      }
    }console.log('‚úÖ Seed d·ªØ li·ªáu trang ch·ªß th√†nh c√¥ng!');
    console.log('üìä ƒê√£ t·∫°o:');
    console.log('  - 7 System Settings:');
    console.log('    ‚Ä¢ Hero Section');
    console.log('    ‚Ä¢ About Section');
    console.log('    ‚Ä¢ Benefits Section');
    console.log('    ‚Ä¢ Testimonials Section');
    console.log('    ‚Ä¢ Contact Section');
    console.log('    ‚Ä¢ Website Configuration');
    console.log('    ‚Ä¢ Homepage Layout');
    console.log('  - 5 FAQs v·ªõi category homepage');
    console.log('');
    console.log('üîß C√°ch s·ª≠ d·ª•ng:');
    console.log('  - Truy c·∫≠p admin panel t·∫°i /admin/homepage ƒë·ªÉ qu·∫£n l√Ω');
    console.log('  - API endpoints ƒë√£ ƒë∆∞·ª£c t·∫°o cho t·ª´ng section');
    console.log('  - D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u trong SystemSetting v√† FAQ tables');

  } catch (error) {
    console.error('‚ùå L·ªói khi seed d·ªØ li·ªáu:', error);
    throw error;
  }
}

async function main() {
  try {
    await seedHomepageData();
  } catch (error) {
    console.error('‚ùå Script seed th·∫•t b·∫°i:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  main();
}

module.exports = { seedHomepageData };
